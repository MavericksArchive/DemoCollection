code_desc_parse_template_type:
  # options are
  # 1. zeroshot
  # 2. zeroshot_with_mq
  # 3. zeroshot_with_rag
  # ...
  zeroshot_with_mq

code:

  # TODO: description. E.g., explain what this prompt tries to achieve
  code_desc_parse_template: >
    The following observation and the code snippets if exist are relevant to 
    Cisco systems product and their management, configuration, and maintenance.
    
    Based on your knowledge about Cisco products and softwares, please extract the two parts from the observation:
      - 1. EXTRACTED_CODE: code command, code snippets, configuration examples, code examples or equilvalent. 
      Find EXTRACTED_CODE from the question and extract. Do not generate. 
      The EXTRACTED_CODE must exist in the Question unless EXTRACTED_CODE is "missing code". 
      - 2. EXTRACTED_DESCRIPTION: Everything except the EXTRACTED_CODE. Remaining texts after extracting the code when exists, 
      including general texts and the description around the code if exists
        
    The answer must be a valid JSON objects and formatted as below:
    {{"code": <EXTRACTED_CODE>, "description": <EXTRACTED_DESCRIPTION>}}

    Only return the EXTRACTED_CODE and the EXTRACTED_DESCRIPTION as a valid JSON object, following the above JSON structure.

    The EXTRACTED_CODE must exist in the Question unless EXTRACTED_CODE is "missing code".

    If you can find either only the code or only description, but not both, do the following:

    - 1. if you can only find the code, leave the description answer as 'missing description'.
        The answer becomes 
        {{"code": <EXTRACTED_CODE>, "description": "missing description"}}

    - 2. if you can only find the description, leave the code answer as 'missing code'
        The answer becomes 
        {{"code": "missing code", "description": <EXTRACTED_DESCRIPTION>}}

    Do not generate additinoal texts. Do not make up the code if you cannot find.
    Ensure the EXTRACTED_CODE exists in the Question unless EXTRACTED_CODE is "missing code".

    Question: {question}
    Answer: 

  # TODO: description. E.g., explain what this prompt tries to achieve
  code_line_analysis_template: >
    You are a helpful Cisco Command-line interface (CLI) expert. 
    Let's carefully exmaine the question and think step by step.
    The following code snippets are relevant to Cisco systems product and their management, configuration, and maintenance.
        
    Based on your knowledge about Cisco products and softwares, please generate the following contents. 
    When doing so, utilize the provided Context information as much as possible.
    The answer must contain the following information:

        - 1. PROMPT: generated by the program to provide context for the user. Examples are 'Device(config)#', 'Device(config-flow-monitor)#', 'Device>', 'Device#'
        - 2. COMMAND: Cisco command provided by the user. 
        - 3. PARAMETERS: Parameters or arguments to the <COMMAND>. These parameters often specify the target and controls the behavior
        - 4. EXPLANATION: this is where you store all the explanations, generated from following steps below. 
        
    The answer must be a valid JSON objects and formatted as below:
    {{"prompt": <PROMPT>, "command": <COMMAND>, "parameters": <PARAMETERS>, "explanation: <EXPLANATION>"}}

    In order to achieve this, each of the Cisco network expert discuss each of the below steps:

        - Step 0. Understand the provided code snippet using your internal knowledge.
        - Step 1. Understand the provided code snippet using provided context. Carefully examine the Context and use it to further comfirm or correct your understanding.
        - Step 2. Break down the provided coded into <PROMPT>, <COMMAND>, and <PARAMETERS>.
        - Step 3. Explain <COMMAND> and put them in <EXPLANATION>
        - Step 4. Explain each parameters in <PARAMETERS> in details and put them in <EXPLANATION>.

    Only return the above as a valid JSON object, following the above JSON structure.
    Do not make up if you do not know the solution. Do not generate any extra words outside of the JSON structure.

    Context: {context}
    Code: {code}
    Answer: 

  # TODO: description. E.g., explain what this prompt tries to achieve
  code_understanding_template: >
    You are a helpful Cisco Network expert. 
    You are very familiar with Cisco products and softwares, as well as their management and configuration.
    Let's carefully exmaine the question and think step by step.
    The following Question is relevant to Cisco systems product and their management, configuration, and maintenance.
        
    Based on your knowledge about Cisco products and softwares, please generate the following contents. 
    When doing so, utilize the provided Context information as much as possible.
    Carefully examine the Context and use it to further comfirm or correct your understanding.

    From the Question, you will be given 
     - USER_INPUT: user's quetion input. It must contain the user's intention why a code snippet is included here.
     - CODE_INTERPRETATION: one or more code lines with their command and parameters identified and explained.
    
    Your goal is to find the relationship between the USER_INPUT and the CODE_INTERPRETATION.
    When the user included a code snippet along with a question, it strongly implies that the code snippet provided needs to be understood.
    Furthermore, typically the code snippet is strongly associated with the problem the user described. 
    Provide your understanding how the USER_INPUT is related to the CODE_INTERPRETATION.

    Do not make up if you do not know the solution. Do not generate any extra words.

    Context: {context}
    Question: {query_w_input}
    Answer: 

  # TODO: description. E.g., explain what this prompt tries to achieve
  code_desc_parse_mq_template: >
    The following observation and the code snippets if exist are relevant to 
    Cisco systems product and their management, configuration, and maintenance.
    The code snippets are any non-natural language sentence from the user question.
    The code snippets may or may not exist in the user input.
    Non-natural language sentence may include code snippets, configuration examples, system warning or system error messsages or similar. The user input may not contain non-natural language sentence.

    Based on your knowledge about Cisco products and softwares, please extract the two parts from the observation:
    - 1. EXTRACTED_CODE: code command, code snippets, configuration examples, code examples, system warning, system error message or equilvalent. This is the non-natural language sentence within the user input. Usually, EXTRACTED_CODE has the following words around EXTRACTED_CODE: config, configuration, error, warning, or similar. 
    The user input may not contain non-natural language sentence. 
    If exists, find EXTRACTED_CODE from the question and extract. Do not generate. 
    If exists, the EXTRACTED_CODE must exist in the Question unless EXTRACTED_CODE is "missing code". 
    - 2. EXTRACTED_DESCRIPTION: Everything else except the EXTRACTED_CODE when EXTRACTED_CODE exists. If EXTRACTED_CODE is 'missing code', then the entire user input becomes EXTRACTED_DESCRIPTION. if EXTRACTED_CODE exists, this is the remaining texts after extracting the EXTRACTED_CODE, including general texts and the description around the EXTRACTED_CODE.  
        
    The answer must be a valid JSON objects and formatted as below:
    {{"code": <EXTRACTED_CODE>, "description": <EXTRACTED_DESCRIPTION>}}

    Only return the EXTRACTED_CODE and the EXTRACTED_DESCRIPTION as a valid JSON object, following the above JSON structure.

    The EXTRACTED_CODE must exist in the Question unless EXTRACTED_CODE is "missing code".

    If you can find either only the code or only description, but not both, do the following:

    - 1. if you can only find the code, leave the description answer as 'missing description'.
        The answer becomes 
        {{"code": <EXTRACTED_CODE>, "description": "missing description"}}

    - 2. if you can only find the description, leave the code answer as 'missing code'
        The answer becomes 
        {{"code": "missing code", "description": <EXTRACTED_DESCRIPTION>}}

    Do not generate additinoal texts. Do not make up the code if you cannot find.
    Ensure the EXTRACTED_CODE exists in the Question unless EXTRACTED_CODE is "missing code".

    To further help you, we have prepared a context information. Pay close attention to the context if you can find any non-natural language part from the context, evaluate if you can utilize the context information, and get the hints as much as possible from the context if it is useful. 

    Note that EXTRACTED_CODE is not a natural language sentence. Evaluate the EXTRACTED_CODE to ensure that it is not a natural language sentence. If EXTRACTED_CODE is a natural language sentence, try to find another non-natural language part. If it does not exist, put 'missing code' in the EXTRACTED_CODE.    

    Context: {context}
                
    Question: {question}

    Answer: 

  # TODO: description. E.g., explain what this prompt tries to achieve
  gen_mq_with_cocde_template: >
    You are an AI language model assistant. Your task is to generate 3 different versions of the given user question to 
    retrieve relevant documents from a vector database. By generating multiple perspectives on the user question, your goal 
    is to help the user overcome some of the limitations of distance-based similarity search. Provide these alternative questions 
    separated by newlines. Generated questions must include any non-natural language sentence from the user question. Non-natural 
    language sentence may include code snippet, configuration examples, system warning or system error messsages or similar. 
    
    Original question: {question}
    Answer: 




  ## =======================================================================================
  ## Older versions
  ## =======================================================================================

  # TODO: description. E.g., explain what this prompt tries to achieve
  code_description_parse_template_v1: >
    The following observation and the code snippets if exist are relevant to 
    Cisco systems product and their management, configuration, and maintenance.
    
    Based on your knowledge about Cisco products and softwares, please extract the
    two parts from the observation:
        - 1. EXTRACTED CODE: code command, code snippets, configuration examples, code examples or equilvalent 
        - 2. EXTRACTED DESCRIPTION: Everything except the EXTRACTED CODE. Remaining texts after extracting the code when exists, 
        including general texts and the description around the code if exists
        
    The answer must be a valid JSON objects and formatted as below:
    {{"code": <EXTRACTED CODE>, "description": <EXTRACTED DESCRIPTION>}}

    Only return the EXTRACTED CODE and the EXTRACTED DESCRIPTION as a valid JSON object, folling the above JSON structure.

    If you can find either only the code or only description, do the following:

        - 1. if you can only find the code, leave the description answer as 'missing description'.
    The answer becomes 
    {{"code": <EXTRACTED CODE>, "description": "missing description"}}

        - 2. if you can only find the description, leave the code answer as 'missing code'
    The answer becomes 
    {{"code": "missing code", "description": <EXTRACTED DESCRIPTION>}}

    Do not generate additinoal texts. Do not make up the names if you cannot find.
    Do not return any non-json text or numbering.

    Question: {question}
    Answer: 

  # TODO: description. E.g., explain what this prompt tries to achieve
  code_line_analysis_template_v1: >
    You are a helpful Cisco Command-line interface (CLI) expert. 
    The following code snippets are relevant to Cisco systems product and their management, configuration, and maintenance.
        
    Based on your knowledge about Cisco products and softwares, please generate the following contents. 
    The answer must contain the following information:

        - 1. PROMPT: generated by the program to provide context for the user.
        - 1. COMMAND: command provided by the user. Commands are usually one of three classes:
        - 2. PARAMETERS: parameters or arguments or options provided by the user. There may exist multiple parameters
        - 3. EXPLANATION: this is where you store all the explanations, generated from following steps below. 
        
    The answer must be a valid JSON objects and formatted as below:
    {{"prompt": <PROMPT>, "command": <COMMAND>, "parameters": <PARAMETERS>, "explanation: <EXPLANATION>"}}

    In order to achieve this, each of the Cisco network expert discuss each of the below steps:

        - Step 0. Understand the provided code snippet using your internal knowledge.
        - Step 1. Understand the provided code snippet using provided context. Provided context may provide some examples.
        - Step 3. Break down the provided coded into <PROMPT>, <COMMAND>, and <PARAMETERS>. And extract the <PROMPT>.
        PROMPT are usually at the very beginning of the code line
        - Step 4. Break down the provided coded into <PROMPT>, <COMMAND>, and <PARAMETERS>. And extract the <COMMAND> without any parameteres.
        COMMAND usually follows the PROMPT if PROMPT exists. 
        - Step 2. Break down the provided coded into <PROMPT>, <COMMAND>, and <PARAMETERS>. And extract the <PARAMETERS>. 
        PARAMETERS usually follows the COMMAND
        - Step 3. Explain <COMMAND> and each parameters in <PARAMETERS> in details and put them in <EXPLANATION>.

    Only return the above as a valid JSON object, following the above JSON structure.
    Do not make up if you do not know the solution. Do not generate any extra words outside of the JSON structure.

    Context: {context}
    Code: {code}
    Answer: 
 